INSERTION SORT VISUAL REPRESENTATION
====================================

Sorting array: [5, 2, 4, 6, 1, 3]

Initial State:
┌───┬───┬───┬───┬───┬───┐
│ 5 │ 2 │ 4 │ 6 │ 1 │ 3 │
└───┴───┴───┴───┴───┴───┘
  0   1   2   3   4   5
  ↑
sorted

Pass 1: Insert 2
┌───┬───┬───┬───┬───┬───┐
│ 5 │ 2 │ 4 │ 6 │ 1 │ 3 │  key = 2
└───┴───┴───┴───┴───┴───┘
  ↑   ↑
sorted key

Compare: 5 > 2, shift 5 right
┌───┬───┬───┬───┬───┬───┐
│   │ 5 │ 4 │ 6 │ 1 │ 3 │  5 moves right →
└───┴───┴───┴───┴───┴───┘
  ↑
insert 2 here

Result:
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 5 │ 4 │ 6 │ 1 │ 3 │
└───┴───┴───┴───┴───┴───┘
  ↑───↑
 sorted

Pass 2: Insert 4
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 5 │ 4 │ 6 │ 1 │ 3 │  key = 4
└───┴───┴───┴───┴───┴───┘
  ↑───↑   ↑
 sorted  key

Compare: 5 > 4, shift 5 right
┌───┬───┬───┬───┬───┬───┐
│ 2 │   │ 5 │ 6 │ 1 │ 3 │
└───┴───┴───┴───┴───┴───┘
      ↑
   insert 4

Compare: 2 < 4, stop
Result:
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 4 │ 5 │ 6 │ 1 │ 3 │
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑
   sorted

Pass 3: Insert 6
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 4 │ 5 │ 6 │ 1 │ 3 │  key = 6
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑   ↑
   sorted    key

Compare: 5 < 6, already in position
Result:
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 4 │ 5 │ 6 │ 1 │ 3 │
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑───↑
     sorted

Pass 4: Insert 1
┌───┬───┬───┬───┬───┬───┐
│ 2 │ 4 │ 5 │ 6 │ 1 │ 3 │  key = 1
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑───↑   ↑
     sorted      key

Shift all elements right:
6 > 1 → shift: │ 2 │ 4 │ 5 │   │ 6 │ 3 │
5 > 1 → shift: │ 2 │ 4 │   │ 5 │ 6 │ 3 │
4 > 1 → shift: │ 2 │   │ 4 │ 5 │ 6 │ 3 │
2 > 1 → shift: │   │ 2 │ 4 │ 5 │ 6 │ 3 │

Insert 1 at position 0:
┌───┬───┬───┬───┬───┬───┐
│ 1 │ 2 │ 4 │ 5 │ 6 │ 3 │
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑───↑───↑
       sorted

Pass 5: Insert 3
┌───┬───┬───┬───┬───┬───┐
│ 1 │ 2 │ 4 │ 5 │ 6 │ 3 │  key = 3
└───┴───┴───┴───┴───┴───┘
  ↑───↑───↑───↑───↑   ↑
       sorted        key

Shift elements:
6 > 3 → shift: │ 1 │ 2 │ 4 │ 5 │   │ 6 │
5 > 3 → shift: │ 1 │ 2 │ 4 │   │ 5 │ 6 │
4 > 3 → shift: │ 1 │ 2 │   │ 4 │ 5 │ 6 │
2 < 3 → stop

Insert 3:
┌───┬───┬───┬───┬───┬───┐
│ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │  ✓ SORTED!
└───┴───┴───┴───┴───┴───┘

ALGORITHM VISUALIZATION:

Pass i: Take element at position i
        Compare with sorted elements (0 to i-1)
        Shift larger elements right
        Insert element at correct position

┌─────────────┐
│   START     │
└─────┬───────┘
      │
      ▼
┌─────────────┐
│   i = 1     │
└─────┬───────┘
      │
      ▼
┌─────────────┐    No
│  i < n ?    ├────────┐
└─────┬───────┘        │
      │ Yes            │
      ▼                │
┌─────────────┐        │
│ key = arr[i]│        │
│ j = i - 1   │        │
└─────┬───────┘        │
      │                │
      ▼                │
┌───────────────────┐  │
│j>=0 && arr[j]>key?│  │
└─────┬─────────────┘  │
      │ Yes            │
      ▼                │
┌───────────────┐      │
│arr[j+1]=arr[j]│      │
│    j--        │      │
└─────┬─────────┘      │
      │                │
      └────────────────┤
                       │
┌─────────────┐        │
│arr[j+1]=key │        │
│    i++      │        │
└─────┬───────┘        │
      │                │
      └────────────────┘
                       │
                       ▼
                ┌─────────────┐
                │    END      │
                └─────────────┘

Time Complexity: O(n²)
Space Complexity: O(1)
Best Case: O(n) - already sorted
Worst Case: O(n²) - reverse sorted
